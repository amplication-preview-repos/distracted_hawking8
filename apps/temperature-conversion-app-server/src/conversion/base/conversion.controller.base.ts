/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ConversionService } from "../conversion.service";
import { ConversionCreateInput } from "./ConversionCreateInput";
import { Conversion } from "./Conversion";
import { ConversionFindManyArgs } from "./ConversionFindManyArgs";
import { ConversionWhereUniqueInput } from "./ConversionWhereUniqueInput";
import { ConversionUpdateInput } from "./ConversionUpdateInput";
import { HistoryEntryFindManyArgs } from "../../historyEntry/base/HistoryEntryFindManyArgs";
import { HistoryEntry } from "../../historyEntry/base/HistoryEntry";
import { HistoryEntryWhereUniqueInput } from "../../historyEntry/base/HistoryEntryWhereUniqueInput";

export class ConversionControllerBase {
  constructor(protected readonly service: ConversionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Conversion })
  async createConversion(
    @common.Body() data: ConversionCreateInput
  ): Promise<Conversion> {
    return await this.service.createConversion({
      data: data,
      select: {
        conversionType: true,
        convertedTemperature: true,
        createdAt: true,
        id: true,
        initialTemperature: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Conversion] })
  @ApiNestedQuery(ConversionFindManyArgs)
  async conversions(@common.Req() request: Request): Promise<Conversion[]> {
    const args = plainToClass(ConversionFindManyArgs, request.query);
    return this.service.conversions({
      ...args,
      select: {
        conversionType: true,
        convertedTemperature: true,
        createdAt: true,
        id: true,
        initialTemperature: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Conversion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async conversion(
    @common.Param() params: ConversionWhereUniqueInput
  ): Promise<Conversion | null> {
    const result = await this.service.conversion({
      where: params,
      select: {
        conversionType: true,
        convertedTemperature: true,
        createdAt: true,
        id: true,
        initialTemperature: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Conversion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateConversion(
    @common.Param() params: ConversionWhereUniqueInput,
    @common.Body() data: ConversionUpdateInput
  ): Promise<Conversion | null> {
    try {
      return await this.service.updateConversion({
        where: params,
        data: data,
        select: {
          conversionType: true,
          convertedTemperature: true,
          createdAt: true,
          id: true,
          initialTemperature: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Conversion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteConversion(
    @common.Param() params: ConversionWhereUniqueInput
  ): Promise<Conversion | null> {
    try {
      return await this.service.deleteConversion({
        where: params,
        select: {
          conversionType: true,
          convertedTemperature: true,
          createdAt: true,
          id: true,
          initialTemperature: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/historyEntries")
  @ApiNestedQuery(HistoryEntryFindManyArgs)
  async findHistoryEntries(
    @common.Req() request: Request,
    @common.Param() params: ConversionWhereUniqueInput
  ): Promise<HistoryEntry[]> {
    const query = plainToClass(HistoryEntryFindManyArgs, request.query);
    const results = await this.service.findHistoryEntries(params.id, {
      ...query,
      select: {
        conversion: {
          select: {
            id: true,
          },
        },

        conversionType: true,
        createdAt: true,
        finalTemperature: true,
        id: true,
        initialTemperature: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/historyEntries")
  async connectHistoryEntries(
    @common.Param() params: ConversionWhereUniqueInput,
    @common.Body() body: HistoryEntryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      historyEntries: {
        connect: body,
      },
    };
    await this.service.updateConversion({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/historyEntries")
  async updateHistoryEntries(
    @common.Param() params: ConversionWhereUniqueInput,
    @common.Body() body: HistoryEntryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      historyEntries: {
        set: body,
      },
    };
    await this.service.updateConversion({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/historyEntries")
  async disconnectHistoryEntries(
    @common.Param() params: ConversionWhereUniqueInput,
    @common.Body() body: HistoryEntryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      historyEntries: {
        disconnect: body,
      },
    };
    await this.service.updateConversion({
      where: params,
      data,
      select: { id: true },
    });
  }
}
