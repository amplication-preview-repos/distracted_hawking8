/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HistoryEntryService } from "../historyEntry.service";
import { HistoryEntryCreateInput } from "./HistoryEntryCreateInput";
import { HistoryEntry } from "./HistoryEntry";
import { HistoryEntryFindManyArgs } from "./HistoryEntryFindManyArgs";
import { HistoryEntryWhereUniqueInput } from "./HistoryEntryWhereUniqueInput";
import { HistoryEntryUpdateInput } from "./HistoryEntryUpdateInput";

export class HistoryEntryControllerBase {
  constructor(protected readonly service: HistoryEntryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HistoryEntry })
  async createHistoryEntry(
    @common.Body() data: HistoryEntryCreateInput
  ): Promise<HistoryEntry> {
    return await this.service.createHistoryEntry({
      data: {
        ...data,

        conversion: data.conversion
          ? {
              connect: data.conversion,
            }
          : undefined,
      },
      select: {
        conversion: {
          select: {
            id: true,
          },
        },

        conversionType: true,
        createdAt: true,
        finalTemperature: true,
        id: true,
        initialTemperature: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [HistoryEntry] })
  @ApiNestedQuery(HistoryEntryFindManyArgs)
  async historyEntries(
    @common.Req() request: Request
  ): Promise<HistoryEntry[]> {
    const args = plainToClass(HistoryEntryFindManyArgs, request.query);
    return this.service.historyEntries({
      ...args,
      select: {
        conversion: {
          select: {
            id: true,
          },
        },

        conversionType: true,
        createdAt: true,
        finalTemperature: true,
        id: true,
        initialTemperature: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HistoryEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async historyEntry(
    @common.Param() params: HistoryEntryWhereUniqueInput
  ): Promise<HistoryEntry | null> {
    const result = await this.service.historyEntry({
      where: params,
      select: {
        conversion: {
          select: {
            id: true,
          },
        },

        conversionType: true,
        createdAt: true,
        finalTemperature: true,
        id: true,
        initialTemperature: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HistoryEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHistoryEntry(
    @common.Param() params: HistoryEntryWhereUniqueInput,
    @common.Body() data: HistoryEntryUpdateInput
  ): Promise<HistoryEntry | null> {
    try {
      return await this.service.updateHistoryEntry({
        where: params,
        data: {
          ...data,

          conversion: data.conversion
            ? {
                connect: data.conversion,
              }
            : undefined,
        },
        select: {
          conversion: {
            select: {
              id: true,
            },
          },

          conversionType: true,
          createdAt: true,
          finalTemperature: true,
          id: true,
          initialTemperature: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HistoryEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHistoryEntry(
    @common.Param() params: HistoryEntryWhereUniqueInput
  ): Promise<HistoryEntry | null> {
    try {
      return await this.service.deleteHistoryEntry({
        where: params,
        select: {
          conversion: {
            select: {
              id: true,
            },
          },

          conversionType: true,
          createdAt: true,
          finalTemperature: true,
          id: true,
          initialTemperature: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
