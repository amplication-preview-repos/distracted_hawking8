/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { HistoryEntry } from "./HistoryEntry";
import { HistoryEntryCountArgs } from "./HistoryEntryCountArgs";
import { HistoryEntryFindManyArgs } from "./HistoryEntryFindManyArgs";
import { HistoryEntryFindUniqueArgs } from "./HistoryEntryFindUniqueArgs";
import { CreateHistoryEntryArgs } from "./CreateHistoryEntryArgs";
import { UpdateHistoryEntryArgs } from "./UpdateHistoryEntryArgs";
import { DeleteHistoryEntryArgs } from "./DeleteHistoryEntryArgs";
import { Conversion } from "../../conversion/base/Conversion";
import { HistoryEntryService } from "../historyEntry.service";
@graphql.Resolver(() => HistoryEntry)
export class HistoryEntryResolverBase {
  constructor(protected readonly service: HistoryEntryService) {}

  async _historyEntriesMeta(
    @graphql.Args() args: HistoryEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [HistoryEntry])
  async historyEntries(
    @graphql.Args() args: HistoryEntryFindManyArgs
  ): Promise<HistoryEntry[]> {
    return this.service.historyEntries(args);
  }

  @graphql.Query(() => HistoryEntry, { nullable: true })
  async historyEntry(
    @graphql.Args() args: HistoryEntryFindUniqueArgs
  ): Promise<HistoryEntry | null> {
    const result = await this.service.historyEntry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => HistoryEntry)
  async createHistoryEntry(
    @graphql.Args() args: CreateHistoryEntryArgs
  ): Promise<HistoryEntry> {
    return await this.service.createHistoryEntry({
      ...args,
      data: {
        ...args.data,

        conversion: args.data.conversion
          ? {
              connect: args.data.conversion,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => HistoryEntry)
  async updateHistoryEntry(
    @graphql.Args() args: UpdateHistoryEntryArgs
  ): Promise<HistoryEntry | null> {
    try {
      return await this.service.updateHistoryEntry({
        ...args,
        data: {
          ...args.data,

          conversion: args.data.conversion
            ? {
                connect: args.data.conversion,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HistoryEntry)
  async deleteHistoryEntry(
    @graphql.Args() args: DeleteHistoryEntryArgs
  ): Promise<HistoryEntry | null> {
    try {
      return await this.service.deleteHistoryEntry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Conversion, {
    nullable: true,
    name: "conversion",
  })
  async getConversion(
    @graphql.Parent() parent: HistoryEntry
  ): Promise<Conversion | null> {
    const result = await this.service.getConversion(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
