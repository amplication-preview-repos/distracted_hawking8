/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  HistoryEntry as PrismaHistoryEntry,
  Conversion as PrismaConversion,
} from "@prisma/client";

export class HistoryEntryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.HistoryEntryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.historyEntry.count(args);
  }

  async historyEntries(
    args: Prisma.HistoryEntryFindManyArgs
  ): Promise<PrismaHistoryEntry[]> {
    return this.prisma.historyEntry.findMany(args);
  }
  async historyEntry(
    args: Prisma.HistoryEntryFindUniqueArgs
  ): Promise<PrismaHistoryEntry | null> {
    return this.prisma.historyEntry.findUnique(args);
  }
  async createHistoryEntry(
    args: Prisma.HistoryEntryCreateArgs
  ): Promise<PrismaHistoryEntry> {
    return this.prisma.historyEntry.create(args);
  }
  async updateHistoryEntry(
    args: Prisma.HistoryEntryUpdateArgs
  ): Promise<PrismaHistoryEntry> {
    return this.prisma.historyEntry.update(args);
  }
  async deleteHistoryEntry(
    args: Prisma.HistoryEntryDeleteArgs
  ): Promise<PrismaHistoryEntry> {
    return this.prisma.historyEntry.delete(args);
  }

  async getConversion(parentId: string): Promise<PrismaConversion | null> {
    return this.prisma.historyEntry
      .findUnique({
        where: { id: parentId },
      })
      .conversion();
  }
}
